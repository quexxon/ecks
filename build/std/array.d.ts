import { TypedValue } from "../ast.js";
import { State } from "../types.js";
import XBoolean from "./boolean.js";
import XInteger from "./integer.js";
import XLambda from "./lambda.js";
import XOptional from "./optional.js";
import XSet from "./set.js";
import XString from "./string.js";
export default class XArray {
    #private;
    kind: string;
    constructor(value: TypedValue[], state: State);
    at(index: TypedValue): XOptional;
    set(index: TypedValue, value: TypedValue): XArray;
    len(): XInteger;
    empty(): XBoolean;
    push(value: TypedValue): XArray;
    last(): XOptional;
    slice(start: TypedValue, end: TypedValue): XArray;
    map(lambda: XLambda): XArray;
    mapi(lambda: XLambda): XArray;
    keep(lambda: XLambda): XArray;
    fold(accumulator: TypedValue, lambda: XLambda): TypedValue;
    drop(lambda: XLambda): XArray;
    all(lambda: TypedValue): XBoolean;
    any(lambda: TypedValue): XBoolean;
    nany(lambda: TypedValue): XBoolean;
    rev(): XArray;
    find(lambda: XLambda): XOptional;
    rfind(lambda: XLambda): XOptional;
    findi(lambda: XLambda): XOptional;
    rfindi(lambda: XLambda): XOptional;
    sort(): XArray;
    rsort(): XArray;
    sortby(comparator: TypedValue): XArray;
    uniq(): XArray;
    toset(): XSet;
    join(string: TypedValue): XString;
    flat(): XArray;
    get __value(): TypedValue[];
    get __valueType(): string | undefined;
    get __length(): number;
    __new(value: TypedValue[]): XArray;
    __eq(value: TypedValue): boolean;
    __lt(value: TypedValue): boolean;
    __gt(value: TypedValue): boolean;
    __toString(): string;
}
